#include <catch2/catch_test_macros.hpp>
#include "common.tpp"
#include <bitset>
#include <unordered_set>
#include "bfss/spatial_hash.tpp"
TEST_CASE("debug", "[debug]") {
    const int bitLength = 4, Lambda = 80, L = 1, cellBitLength = 2;
    const int aliceCount = 1, bobCount = 1;
    const int radius = 1 << cellBitLength;
    std::bitset<1424> bruh
    using SuitableSpatialHash = SpatialHash<bitLength - cellBitLength, radius * radius, Lambda>;
    std::unordered_set<std::bitset<16>> rets;
    for (int expr = 0; expr < 100; ++expr) {
        SuitableSpatialHash hash;
        auto inner = hash.decode(bruh, 0, 0);
        rets.emplace(inner);
    }
    std::cout << rets.size() << std::endl;
}
